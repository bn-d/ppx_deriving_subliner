{0 [[@@deriving subliner]] and [[%%subliner]]}

[[@@deriving]] plugin to generate
{{:https://opam.ocaml.org/packages/cmdliner/}Cmdliner} sub-commands groups, and
rewriter to generate {{:https://opam.ocaml.org/packages/cmdliner/}Cmdliner}
evaluations.


{1 Usage}

To use [[@@deriving subliner]] or [[%%subliner]], add
[(preprocess (pps ppx_subliner))] to the library or executable configuration in
dune file.


{1 Syntax}


{2 Term}
A {{:https://opam.ocaml.org/packages/cmdliner/}Cmdliner} term can be generated
by tagging [[@@deriving subliner]] to a record type.

For record type [params], function [params_cmdliner_term] with type
[unit -> params Cmdliner.Term.t] will be generated. A command line argument will
be generated for each field in the record. {!arg_attr} can be attached to fields
or types to modify the behavior of the corresponding arguments.

{[
type foo = { my_arg : string } [@@deriving_inline subliner]
include
  sig
    [@@@ocaml.warning "-32"]
    val foo_cmdliner_term : unit -> foo Cmdliner.Term.t
  end[@@ocaml.doc "@inline"]
[@@@end]
]}

The derived function can be used with [[%subliner.term]] extension and a
handling function to generate
{{:https://opam.ocaml.org/packages/cmdliner/}Cmdliner} evaluation.
{!cmd_info_attr} and {!default_term_attr} can be attached to the extension to
modify the behavior of the command line tools.

{[
let handle { my_arg } = print_endline my_arg

[%%subliner.term eval.params <- handle]
]}

Different {{:https://erratique.ch/software/cmdliner/doc/Cmdliner/Cmd/index.html#eval}evaluation functions}
can be used and optional parameters can be applied.

{[
[%%subliner.term (eval_result ~catch:false).params <- handle_result]
]}


{2 Sub-commands}
A group of {{:https://opam.ocaml.org/packages/cmdliner/}Cmdliner} sub-commands
can be generated by tagging [[@@deriving subliner]] to a variant type and
providing a handling function for that variant.

For variant type [params], function [params_cmdliner_group_cmds] with type
[(params -> 'a) -> 'a Cmdliner.Cmd.t list] will be generated. The input function
takes a handling function to process parsed input. A sub-command will be
generated for each constructor in the variant. {!cmd_info_attr} can be attached
to constructors to modify the behavior of the corresponding sub-commands.

Each constructor of the variant can only have one or no parameter. If a
constructor has a parameter with type [p], function [p_cmdliner_term] with type
[unit -> p Cmdliner.Term.t] is required. The function can be either obtained by
tagging a supported record with [[@@deriving subliner]],
{{:https://github.com/hammerlab/ppx_deriving_cmdliner}[[@@deriving cmdliner]]}
or constructed manually.

{[
type foo = { my_arg : string }
val foo_cmdliner_term : unit -> foo Cmdliner.Term,t

type params =
  | Foo of foo
  | Bar
[@@deriving_inline subliner]
include
  sig
    [@@@ocaml.warning "-32"]
    val params_cmdliner_group_cmds : (params -> 'a) -> 'a Cmdliner.Cmd.t list
  end[@@ocaml.doc "@inline"]
[@@@end]
]}

The derived function can be used with [[%%subliner.cmds]] extension to generate
{{:https://opam.ocaml.org/packages/cmdliner/}Cmdliner} evaluation.
{!cmd_info_attr} and {!default_term_attr} can be attached to the extension to
modify the behavior of the command line tools.

{[
let handle = function
  | Foo { my_arg } -> print_endline ("Foo " ^ my_arg)
  | Bar -> print_endline "Bar"

[%%subliner.cmds eval.params <- handle]
]}

Different {{:https://erratique.ch/software/cmdliner/doc/Cmdliner/Cmd/index.html#eval}evaluation functions}
can be used and optional parameters can be applied.

{[
[%%subliner.cmds (eval_result ~catch:false).params <- handle_result]
]}


{1 Supported Attributes}
All attributes may be prefixed with [subliner.] to avoid conflicts with other
extensions.


{2:arg_attr [Arg] Attributes}

{3 [[@names string list]]}

Set the names of the named argument. If not provided, kebab case of the field
name will be used (i.e. filed [foo_bar] will have name ["foo-bar"] by default).

{[
type params = { foo : string [@names [ "my-arg-name"; "n" ]] }
]}

{3 [[@doc string]]}

Set the man page description of the argument. If not provided, the doc string
will be used.

{[
type params = { foo : string [@doc "This is the documentation"] }
]}

{3:attr_opt_all [[@opt_all]]}

Allow the optional argument to appear more than once ( see {{:https://erratique.ch/software/cmdliner/doc/Cmdliner/Arg/index.html#val-opt_all}opt_all}
for more details). This attribute must be used with a list, or used with
{!attr_last} attribute at the same time.

Conflict with {!attr_pos}.

{[
type params = { foo : string list [@opt_all] }
]}

{3:attr_pos [[@pos int]], [[@pos_all]], [[@pos_right int]], [[@pos_left int]]}

Set the argument to be positional. [[@pos_all]], [[@pos_right int]] and
[[@pos_left int]] must be used with a list type or used with {!attr_last} attribute
at the same time.

Conflict with {!attr_opt_all}.

{[
type params = { foo : string list [@pos_right 1] }
]}

{3:attr_non_empty [[@non_empty]]}

Enforce a list argument to be non-empty.

Conflict with {!attr_arg_default}, {!attr_last}.

{[
type params = { foo : string list [@non_empty] }
]}

{3:attr_last [[@last]]}

Only evaluates the last element of the list.

[[@last.sep char]] can be used with this attribute to set the separator of the list.

Conflict with {!attr_non_empty}.

{[
type params = { foo : string [@last] [@last.sep ';'] }
]}

{3:attr_arg_default [[@default value]]}

Set the default value of the argument.

Conflict with {!attr_non_empty}.

{[
type params = { foo : string [@default "My default string"] }
]}

{3 [[@env string]]}

Set the the name of an environment variable which is looked up for defining the
argument if it is absent.

[[@env.deprecated string]], [[@env.docs string]] and [[@env.doc string]] can be
used with this attribute. For their exact usages, please refer to the
documentation of {{:https://erratique.ch/software/cmdliner/doc/Cmdliner/Cmd/Env/index.html#val-info}Cmdliner.Cmd.Env.info}.

{[
type params = { foo : string [@env "MY_ENV_VAR"] }
]}

{3 Other}

[[@deprecated string]], [[@absent string]], [[@docs string]] and [[@docv string]]
are also supported. For their exact usages, please refer to the documentation of
{{:https://erratique.ch/software/cmdliner/doc/Cmdliner/Arg/index.html#val-info}Cmdliner.Arg.info}.


{2:cmd_info_attr [Cmd.info] Attributes}


{3 [[@name string]]}

Set the name of the command. If not provided, the kebab case of the constructor
name will be used (i.e. constructor [Foo_bar] will have name ["foo-bar"] by default)
for sub-commands, and the executable name will be used for command line tools.

{[
type params = Foo [@name "my-cmd-name"]
]}

{3 [[@doc string]]}

Set the one line description of the command. If not provided, the doc string
will be used.

{[
type params = Foo (** This is a short description of My_cmd. *)
]}

{3 Other}

[[@version string]], [[@deprecated string]], [[@docs string]], [[@sdocs string]],
[[@exits Exit.info list]], [[@envs Env.info list]], [[@man Manpage.block list]]
and [[@man_xrefs Manpage.xref list]] are also supported. For their exact usages,
please refer to the documentation of {{:https://erratique.ch/software/cmdliner/doc/Cmdliner/Cmd/index.html#val-info}Cmdliner.Cmd.info}.


{2:default_term_attr Default [Term.t] Attribute}


For sub-command evaluation, [[@@default]] can be used to change the command line
syntax to parse if no sub command is specified. By default, it will show the
default help page.

{[
let default = Cmdliner.Term.(ret (const (`Error (true, "Some error messages"))))

[%%subliner.cmds eval.params <- handle]
[@@default default]
]}


{2:type_attr Attributes for Types}


The following attributes must be attached to types directly.

{[
(* correct *)
type params = { foo : (string [@attr]) }

(* wrong, the attribute is attached to the field instead of the type *)

type params = { foo : string [@attr] }
]}

{3 [[@file]], [[@dir]], [[@non_dir_file]]}

Check whether the provided name for file, dir or non-dir file exists. Only one
of these attributes can be specified at the same time.

{[
type params = { foo : (string [@non_dir_file]) }
]}

{3 [[@sep char]]}

Set the separate of lists, arrays or tuples. This attribute can be used on
nested structures.

{[
type params = { rgb : (((int * int * int)[@sep '#']) list[@sep ';']) }
]}